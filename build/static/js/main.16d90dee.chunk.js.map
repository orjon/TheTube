{"version":3,"sources":["Nav.js","LineStop.js","LineStops.js","LineStatus.js","LineStatuses.js","Map.js","LineArrivals.js","Facilties.js","Station.js","App.js","Helpers.js","serviceWorker.js","index.js"],"names":["Nav","props","state","today","Date","now","className","to","format","ticking","Component","LineStop","findStationFromId","stationToFind","stations","filter","station","id","bind","tubeLines","line","index","findIndex","lineX","name","lines","this","thisStation","pop","map","lightColor","includes","key","lineId","lineName","url","defaultProps","undefined","LineStops","lineStops","console","log","length","LineStatus","disruptionReason","reason","cropIndex","indexOf","substring","status","LineStatuses","tubeStatuses","mapboxgl","accessToken","process","Map","lng","lat","zoom","markers","container","mapDiv","style","center","ref","el","React","LineArrivals","arrivals","arrival","uuid","towards","expected","noArrivals","Facilties","facilities","facility","Station","getArrivals","apiString","stationId","axios","get","headers","Accept","data","push","platform","platformName","desintation","destination","expectedArrival","setState","getInfo","address","split","lineOfAddress","lineArrivals","findLine","contact","value","formatAddress","phoneNo","location","formatLocation","App","idToFind","find","findStationFromUrl","findLineIndex","lineToFind","getStatuses","i","getStopOrder","stopOrder","getStations","j","addStation","sort","compare","response","lineStatuses","statusSeverityDescription","orderedLineRoutes","property","lineStations","validFacilities","rejectedValues","renamedFacilityKeys","forEach","facilityObject","additionalProperties","x","inputString","validContacts","propertyObject","trimStationName","commonName","toLowerCase","replace","lon","stationName","trimmedStationName","cropIndex1","slice","newStation","foundIndex","stationA","stationB","exact","path","render","routeProps","match","params","href","mapboxToken","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16d90dee.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport './Nav.scss';\nimport Clock from 'react-live-clock';\n\n\nclass Nav extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n    }\n    this.today = Date.now()\n  }\n\n  render(){\n    const dateToFormat = '1976-04-19T12:59-0500';\n    return(\n      <div className='Nav'>\n        <Link to='/'>\n          <div className='AppTitle'>Transport for London API</div>\n        </Link>\n        <div className='dateTime'>\n          <Clock className = 'Time'format={'HH:mm'} ticking={true}/>\n          <Clock className = 'Date' format={'DD-MMM-YYYY'} ticking={true}/>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './LineStop.scss';\n\nclass LineStop extends Component{\n  static defaultProps={\n    thisStation: {\n      lines: []\n    },\n    station: {\n      id : undefined\n    }\n  }\n\n  constructor(props){\n    super(props);\n    this.findStationFromId = this.findStationFromId.bind(this)\n  }\n\n  lineName(tubeLines, line){\n    let index = tubeLines.findIndex(lineX => lineX.id === line);\n    return tubeLines[index].name\n  }\n\n  lineId(tubeLines, line){\n    let index = tubeLines.findIndex(lineX => lineX.id === line);\n    return tubeLines[index].id\n  }\n\n  findStationFromId = (stationToFind) => {\n    return this.props.stations.filter( station => station.id === stationToFind);\n  }\n\n\n  render(){\n    let { station, tubeLines, stations, thisStation} = this.props\n    let lines = []\n\n    thisStation = this.findStationFromId(station.id).pop()\n    // console.log('thisStation: ',thisStation.lines)\n\n\n\n      lines = thisStation.lines.map(line => {\n\n      // Check for light color to format text color if needed\n        let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n        let lightColor = ''\n\n        if (lightColors.includes(line)){\n          lightColor = 'lightColor'\n        }\n      //\n\n\n      return <Link key={line} to={`/line/${this.lineId(tubeLines, line)}`}>\n                <div className={`lineCell ${line} ${lightColor}`}>\n                  {this.lineName(tubeLines, line)}\n                </div>\n              </Link>\n    })\n\n\n  \n    return(\n      <div className='row lineStop'>\n        <Link className='w50 lineName' to={`/station/${station.url}`}>\n          {station.name}\n        </Link>\n\n        <div className='column w50 linesBlock'>\n          {lines}\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default LineStop;\n","import React, { Component } from 'react';\nimport LineStop from './LineStop';\nimport './Section.scss';\nimport './LineStops.scss';\n\nclass LineStops extends Component{\n  static defaultProps={\n    line: {\n      id: 'loading...',\n      name: 'loading...',\n      stations: []\n    },\n    tubeLines: {\n    },\n    stations: []\n  }\n\n  render(){\n    const { line, tubeLines, stations } = this.props\n\n    let lineStops = line.stations.map(station => \n      <LineStop key={station.id} station={station} stations={stations} tubeLines={tubeLines}/>\n    )\n\n    let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n    let lightColor = ''\n\n      if (lightColors.includes(line.id)){\n        lightColor = 'lightColor'\n      }\n\n    console.log('line: ',line.id)\n\n\n\n    return(\n\n\n\n      <section>\n        {/* <div className='sectionTitle'>Line Details</div> */}\n        <div className='CardSingle'> \n          <div className='Card'>\n            \n            <div className={`row lineColor ${line.id}`}>\n              <div className={`${lightColor}`}>{line.name}</div>\n            </div>\n\n            {/* <div className='row'>\n              <div className='status'>Stations: {line.stations.length}</div>\n            </div> */}\n\n            <div className='row'>\n              <div className='column w100 indent1'>\n                <h2>Stations Served ({line.stations.length})</h2>\n                <div className='LineStops dataBlock indent2'>\n                  {/* <div className='row'>\n                    <h4 className='infoLabel'>Station</h4>\n                    <h4 className='infoLabel end'>Lines Served</h4>\n                  </div> */}\n                  {lineStops}\n                </div>\n              </div>\n            </div>\n\n\n\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default LineStops;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './_Card.scss';\n\nclass LineStatus extends Component {\n  render(){\n    const { line } = this.props\n    let disruptionReason = ''\n      if (line.reason) {\n        disruptionReason = line.reason\n        var cropIndex = disruptionReason.indexOf(':') + 1\n        disruptionReason = disruptionReason.substring(cropIndex)\n      }\n\n\n    let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n    let lightColor = ''\n\n      if (lightColors.includes(line.id)){\n        lightColor = 'lightColor'\n      }\n\n\n    return(\n      <div className='LineStatus'>\n        <Link to={`/line/${line.id}`}>\n          <div className='Card'>\n\n            <div className={`row lineColor ${line.id}`}>\n                <div className={`${lightColor}`}>{line.name}</div>\n            </div>\n            \n            <div className='row titleRow'>\n              {/* <h1>{line.name}</h1> */}\n              <div className='status'>{line.status}</div>\n            </div>\n\n            <div className='row'>\n              <div className='data'>\n                {disruptionReason}\n              </div>\n            </div>\n          </div>\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default LineStatus;","import React, { Component } from 'react';\nimport LineStatus from './LineStatus';\nimport './Section.scss';\n\nclass LineStatuses extends Component {\n\n  render(){\n    const { tubeLines } = this.props\n    const tubeStatuses = tubeLines.map( line => (\n      <LineStatus key={line.id} line={line}/>\n    ))\n    return(\n      <section>\n        {/* <div className='sectionTitle'>Line Statuses</div> */}\n        <div className='sectionBody CardGrid'>\n          {tubeStatuses}\n        </div>\n      </section>\n\n    )\n  }\n}\n\nexport default LineStatuses;\n","import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: this.props.lng,\n      lat: this.props.lat,\n      zoom: 15\n    };\n    this.markers = []\n  }\n  \n  // constructor() {\n  //   super()\n\n  //   this.markers = []\n  // }\n\n  componentDidMount() {\n    // this.map = new mapboxgl.Map({\n    //   container: this.mapDiv,\n    //   style: 'mapbox://styles/mapbox/streets-v9',\n    //   center: this.props.center,\n    //   zoom: 12\n    // })\n    // this.map.on('click', this.props.onClick)\n    // this.setMarkers()\n\n    new mapboxgl.Map({\n      container: this.mapDiv,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n  }\n\n  // componentDidUpdate() {\n  //   this.setMarkers()\n  // }\n\n  // setMarkers() {\n  //   this.markers.forEach(marker => marker.remove())\n  //   this.markers = this.props.points.map(point => {\n  //     return new mapboxgl.Marker()\n  //       .setLngLat({  lat: point.lat, lng: point.lon })\n  //       .addTo(this.map)\n  //   })\n  //   console.log(this.markers)\n  // }\n\n  render() {\n    return(\n      <div className='row map' ref={el => this.mapDiv = el} />\n    )\n  }\n}\n\nexport default Map\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {v4 as uuid} from 'uuid';\nimport './LineArrivals.scss';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nclass LineArrivals extends Component{\n\n\n  render(){\n    const { line } = this.props\n    let allArrivals = this.props.arrivals\n\n    let arrivals = allArrivals\n      .filter(arrival => arrival.lineId === line.id)\n      .map(arrival => \n        <div className='row' key={uuid()}>\n          <div >{arrival.towards}</div>\n          <div className='end'>{arrival.expected}</div>\n        </div>\n      )\n\n      let noArrivals = false;\n\n      if (arrivals.length === 0){\n        noArrivals = true;\n      }\n\n    \n    let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n    let lightColor = ''\n\n      if (lightColors.includes(line.id)){\n        lightColor = 'lightColor'\n      }\n  \n\n    return(\n      <div className='column dataBlock indent2'>\n          <Link className='row' to={`/line/${line.id}`}>\n            <div className='column w100 b1'>\n              <div key={line.id} className={`row lineColor ${line.id}`}>\n                <div className={`${lightColor}`}>{line.name}</div>\n              </div>\n\n\n              <div className='row linkTo'>\n                {/* <h3 >{line.name}</h3> */}\n                <div className='status'>{line.status}</div>\n              </div>\n            </div>\n          </Link>\n\n            {/* <div className='row'>\n              <h4 className='infoLabel'>Towards</h4>\n              <h4 className='infoLabel end'>Expected Arrival</h4>\n            </div> */}\n\n          { !noArrivals &&\n            <div className='row'>\n              <h4 className='infoLabel'>Towards</h4>\n              <h4 className='infoLabel end'>Expected Arrival</h4>\n            </div>\n           }\n\n          {/* <div className={`row lineRowDivide`}></div> */}\n          {arrivals}\n          {/* <div className={`row lineRowDivide`}></div> */}\n        </div>\n    )\n  }\n}\n\nexport default LineArrivals;\n\n{/* <div className='row LineArrivals'>\n<div className='columnm w100'>\n  <Link to={`/line/${line.id}`}>\n    <div key={line} className={`row lineColor ${line.id}`}></div>\n    <div className='row linkTo'>\n      <h3 >{line.name}</h3>\n      <div className='status'>{line.status}</div>\n    </div>\n  </Link>\n  <div className='row'>\n    <h4 className='column'>Towards</h4>\n    <h4 className='column end'>Expected Arrival</h4>\n  </div>\n  {arrivals}\n</div>\n</div> */}\n\n\n","import React, { Component } from 'react';\nimport './Facilities.scss';\n\nclass Facilties extends Component {\n  static defaultProps={\n    facilities: []\n    }\n\n  render(){\n    let { facilities } = this.props\n\n    facilities = facilities.map(facility => \n      <div key={facility.key} className='w25 column'>\n        {facility.key}\n      </div>\n    )\n\n    return(\n        <div className='Facilities dataBlock indent2'>\n        {facilities}\n        </div>\n\n\n\n      // {/* <div className='row facilitiesIcons indent2'> */\n      //     /* <IconWifi /> */\n      //   /* <img src={IconWifi} className='icon' alt=\"Wifi Icon\" />\n      //   <img src={IconATM} className='icon' alt=\"ATM Icon\" /> */\n      // /* </div> */}\n\n    )\n  }\n}\n\nexport default Facilties;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {v4 as uuid} from 'uuid';\nimport Map from './Map';\nimport LineArrivals from './LineArrivals';\nimport Facilities from './Facilties';\nimport './Section.scss';\nimport './Station.scss';\n// import IconWifi from './icons/wifi.svg';\n// import IconATM from './icons/atm.svg';\n\n\nclass Station extends Component {\n  static defaultProps={\n    station: {\n      id: undefined,\n      url: 'loading...',\n      name: 'loading...',\n      address: '',\n      lat: 0,\n      lng: 0,\n      lines: [],\n      contact: [\n        {value: 'the address'},\n        {value: 'the phone number'}\n      ]\n    }\n  }\n\n  constructor(props){\n    super(props);\n    this.state={\n      arrivals:[],\n      station: this.props.station\n    }\n    this.getArrivals = this.getArrivals.bind(this)\n  }\n\n  async getArrivals(){\n    const { apiString, station } = this.props\n    const stationId = station.id\n    let arrivals = []\n    let response = await axios.get(`https://api.tfl.gov.uk/StopPoint/${stationId}/Arrivals?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    response.data.map(arrival => \n      arrivals.push({\n        lineName: arrival.lineName,\n        lineId: arrival.lineId,\n        platform: arrival.platformName,\n        desintation: arrival.destination,\n        towards: arrival.towards,\n        expected: arrival.expectedArrival\n      })\n    )\n    this.setState({\n      arrivals: [...arrivals]\n    })\n  }\n\n  componentDidMount(){\n    const { getInfo } = this.props\n    // getInfo()\n    this.getArrivals()\n  }\n\n  formatLocation(lat, lng){\n    lat = lat + '°N'\n    if (lng >= 0) {\n      lng = lng + '°E'\n    } else{\n      lng = - lng + '°W'\n    }\n    return {lat: lat, lng: lng}\n  }\n\n  formatAddress(address){\n    address = address.split(',')\n    address = address.map(lineOfAddress => \n      <div key={uuid()}>{lineOfAddress}</div>\n    )\n    return address\n  }\n\n  findLine(tubeLines, line){\n    let index = tubeLines.findIndex(lineX => lineX.id === line);\n    return tubeLines[index]\n  }\n\n \n\n  render(){\n    const { station, tubeLines } = this.props\n\n    \n\n    // Loops through each line served by station\n      let lineArrivals = station.lines.map(line => \n        <LineArrivals key={line} line={this.findLine(tubeLines, line)} arrivals={this.state.arrivals}/>\n      )\n    //\n    \n\n    let address = station.contact[0].value\n    address = this.formatAddress(address)\n    let phoneNo = station.contact[1].value\n    let location = this.formatLocation(station.lat, station.lng)\n\n    // console.log(address)\n\n    return(\n      <section>\n        {/* <div className='sectionTitle'>Station Details</div> */}\n        <div className='CardSingle'>\n          <div className='Card'> \n\n            <div className='row'>\n              <h1>{station.name}</h1>\n            </div>\n\n            {/* <div className={`row lineRowDivide`}></div> */}\n            <div className='row'>\n              <div className='column w100 indent1'>\n                <h2>Arrivals</h2>\n                {lineArrivals}\n              </div>\n            </div>\n\n            <div className='row facilities'>\n              <div className='column w100 indent1'>\n                <h2>Facilities</h2>\n                <Facilities facilities={station.facilities}/>\n              </div>\n            </div>\n            \n            <div className='row address'>\n              <div className='column w50 indent1'>\n                <h2>Address</h2>\n                <div className='column dataBlock indent2'>\n                  {address}\n                </div>\n              </div> \n              <div className='column w50 indent1'>\n                <h2>Telephone</h2>\n                <div className='column dataBlock indent2'>\n                  {phoneNo}\n                </div>\n              </div>\n            </div>\n\n            <div className='row rowLast'>\n              <div className='column w100 indent2'>\n                <Map\n                    lat={station.lat}\n                    lng={station.lng}\n                  />\n                <div className='row'>\n                  <div>{location.lat} {location.lng}</div>\n                  <div className='code'>Station ID: {station.id}</div>\n                </div>\n              </div>\n\n            </div>\n\n\n          </div>\n            \n        </div>\n      </section>\n    )\n  }\n}\n\nexport default Station","import React, { Component } from 'react';\nimport { Route, Switch} from 'react-router-dom';\nimport axios from 'axios';\nimport { kebabCase } from './Helpers';\nimport Nav from './Nav';\nimport LineStops from './LineStops'\nimport LineStatuses from './LineStatuses';\nimport Station from './Station';\nimport './App.scss';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\n\nclass App extends Component {\n  static defaultProps = {\n    apiString: `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN\n  }\n\n  constructor(props){\n    super(props);\n    this.state={\n      tubeLines: [],\n      stations: [],\n    }\n  }\n\n  componentDidMount(){\n    if (this.state.tubeLines.length === 0){\n      this.getInfo()\n    }\n  }\n\n\n  async getInfo(){\n    console.log('Getting statuses...')\n    let lines = await this.getStatuses()\n    //----------------------------------\n    console.log('Getting stop orders...')\n    for (let i=0; i<lines.length; i++){\n      lines[i].stopOrder = await this.getStopOrder(lines[i].id)\n    }\n    //----------------------------------\n    let stations = []\n    for (let i=0; i<lines.length; i++){\n      lines[i].stations = await this.getStations(lines[i].id)\n      for (let j=0; j<lines[i].stations.length; j++){\n        lines[i].stations[j].lines = [lines[i].id]\n        stations = this.addStation(lines[i].stations[j], stations)\n      }\n      // console.log('lines in stations', )\n    }\n    stations.sort( this.compare );\n    // console.log('stations: ',stations)\n    // console.log(stations.sort())\n    this.setState({\n      tubeLines: lines,\n      stations: stations\n    })\n  }\n\n\n  async getStatuses(){\n    const { apiString } = this.props\n    let lines = []\n    let response = await axios.get(`https://api.tfl.gov.uk/line/mode/tube/status?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    let linesInfo = response.data\n    linesInfo.map(line => \n      lines.push({\n        key: line.id,\n        id: line.id,\n        name: line.name,\n        status: line.lineStatuses[0].statusSeverityDescription,\n        reason: line.lineStatuses[0].reason,\n        stopOrder: [],\n        // stations: []\n      })\n    )\n    return lines\n  }\n\n  \n\n  \n  async getStopOrder(lineId){\n    const { apiString } = this.props\n    let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/Route/Sequence/all?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    // console.log('Got:', lineId)\n    let stopOrder = response.data.orderedLineRoutes\n    return stopOrder\n  }\n\n  checkProperties(property){\n    if (property){\n      property = property.value\n      return property\n    } \n    property = undefined\n    return property\n  }\n\n\n  async getStations(lineId){\n    const { apiString } = this.props\n    let lineStations = []\n    let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/StopPoints?tflOperatedNationalRailStationsOnly=false&${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    // console.log('Line Stations:', response.data[1].additionalProperties)\n    response.data.map(station => {\n      let contact = [\n        {key: 'Address', value: undefined},\n        {key: 'PhoneNo', value: undefined}\n      ]\n      let facility = [\n        {key: 'Ticket Halls', value: undefined},\n        {key: 'Toilets', value: undefined},\n        {key: 'Lifts', value: undefined},\n        {key: 'Escalators', value: undefined},\n        {key: 'WiFi', value: undefined},\n        {key: 'Help Points', value: undefined},\n        {key: 'Payphones', value: undefined},\n        {key: 'Boarding Ramp', value: undefined},\n        {key: 'Cash Machines', value: undefined},\n        {key: 'Euro Cash Machines', value: undefined},\n        {key: 'Waiting Room', value: undefined},\n        // {key: 'Gates', value: undefined},\n        {key: 'TaxiRankOutsideStation', value: undefined},\n        {key: 'Car park', value: undefined},\n        {key: 'Left Luggage', value: undefined},\n        {key: 'Photo Booths', value: undefined},\n        {key: 'Amazon Lockers', value: undefined},\n        {key: 'ASDA Click and Collect', value: undefined},\n      ]\n\n\n      let validFacilities = []\n      let rejectedValues = ['no', '0']\n      let renamedFacilityKeys = ['TaxiRankOutsideStation']\n      \n\n      facility.forEach(facility => {\n        let facilityObject = station.additionalProperties.find(x => x.key === facility.key)\n\n        \n\n        if (facilityObject && renamedFacilityKeys.includes(facility.key)) {\n          facility.key = 'Taxi Rank'\n        }\n\n\n        if (facilityObject && !rejectedValues.includes(facilityObject.value)){\n          facility.value = facilityObject.value\n          validFacilities.push(facility)\n          return\n        } \n      });\n\n\n      let validContacts = []\n\n      contact.forEach(property => {\n        let propertyObject = station.additionalProperties.find(x => x.key === property.key)\n        if (propertyObject){\n          if (!rejectedValues.includes(propertyObject.value)){\n            property.value = propertyObject.value\n            validContacts.push(property)\n            return\n          }\n        } \n      });\n\n      return lineStations.push({\n        key: station.id,\n        id: station.id,\n        url: kebabCase(this.trimStationName(station.commonName)),\n        name: this.trimStationName(station.commonName),\n        lat: station.lat,\n        lng: station.lon,\n        contact: [...validContacts],\n        facilities: validFacilities\n      })\n    })\n    return lineStations;\n  }\n\n\n\n\n  trimStationName(stationName){\n    let trimmedStationName = stationName.replace('Underground Station', '')\n    let cropIndex1 = trimmedStationName.indexOf('(') + 2\n    if (cropIndex1 !== 0){\n      trimmedStationName = trimmedStationName.slice(0, (cropIndex1-2))\n    } \n    return trimmedStationName\n  }\n\n\n  addStation(newStation, stations){\n    let foundIndex = stations.findIndex(station => station.id === newStation.id);\n    if (foundIndex !== -1){\n      stations[foundIndex].lines.push(newStation.lines[0])\n    } else {\n      stations = [...stations, newStation]\n    }\n    return stations\n  }\n\n  compare( stationA, stationB ) {\n    if ( stationA.name < stationB.name ){\n      return -1;\n    }\n    if ( stationA.name > stationB.name ){\n      return 1;\n    }\n    return 0;\n  }\n\n  //returns single line based on id\n  findLine = (idToFind) => {\n    return this.state.tubeLines.find(function(line){\n      return line.id === idToFind;\n    })\n  }\n\n  findStationFromUrl = (stationToFind) => {\n    return this.state.stations.find(function(station){\n      return station.url === stationToFind;\n    })\n  }\n\n  findStationFromId = (stationToFind) => {\n    return this.state.stations.findIndex( station => station.id === stationToFind);\n  }\n\n\n  findLineIndex = (lineToFind) => {\n    let index = this.state.tubeLines.findIndex(line => line.id === lineToFind)\n    return index\n  }\n\n\n  render(){\n    return (\n      <div className='App'>\n        <header>\n          <Nav />\n        </header>\n        <Switch>\n        <Route\n            exact\n            path='/'\n            render={(routeProps) => (\n              <LineStatuses\n                {...routeProps}\n                tubeLines={this.state.tubeLines}\n                />\n            )}\n          />\n          <Route\n            exact\n            path='/tube/status'\n            render={(routeProps) => (\n              <LineStatuses\n                {...routeProps}\n                tubeLines={this.state.tubeLines}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/line/:id'\n            render={(routeProps) => (\n              <LineStops\n                {...routeProps} \n                tubeLines={this.state.tubeLines}\n                stations={this.state.stations}\n                line={this.findLine(routeProps.match.params.id)}\n\n                // lineIndex={this.findLineIndex(routeProps.match.params.id)}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/station/:url'\n            render={(routeProps) => (\n              <Station\n                {...routeProps} \n                tubeLines={this.state.tubeLines}\n                apiString={this.props.apiString}\n                station={this.findStationFromUrl(routeProps.match.params.url)}\n                getInfo={this.getInfo}\n              />\n            )}\n          />\n\n        </Switch>\n  \n        <footer className='right'>\n          <a href='http://www.orjon.com'>orjon.com</a>\n        </footer>\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n\n// [\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"Accessibility\",\n//     \"availableKeys\": [\n//       \"SpecificEntranceRequired\",\n//       \"TaxiRankOutsideStation\",\n//       \"SpecificEntranceInstructions\",\n//       \"Toilet\",\n//       \"AddtionalInformation\",\n//       \"LimitedCapacityLift\",\n//       \"AccessViaLift\",\n//       \"BlueBadgeCarParkSpaces\",\n//       \"ToiletNote\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"Address\",\n//     \"availableKeys\": [\n//       \"Address\",\n//       \"PhoneNo\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"Direction\",\n//     \"availableKeys\": [\n//       \"Towards\",\n//       \"CompassPoint\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"key\",\n//     \"availableKeys\": [\n//       \"Boarding Ramp\",\n//       \"Lifts\",\n//       \"Boarding Ramps\",\n//       \"Escalators\",\n//       \"Cash Machines\",\n//       \"Waiting Room\",\n//       \"Bridge\",\n//       \"Car park\",\n//       \"Euro Cash Machines\",\n//       \"Payphones\",\n//       \"ASDA Click and Collect\",\n//       \"Ticket Halls\",\n//       \"Amazon Lockers\",\n//       \"Other Facilities\",\n//       \"Help Points\",\n//       \"WiFi\",\n//       \"Gates\",\n//       \"Toilets\",\n//       \"Left Luggage\",\n//       \"Photo Booths\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"Geo\",\n//     \"availableKeys\": [\n//       \"Zone\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"NearestPlaces\",\n//     \"availableKeys\": [\n//       \"SourceSystemPlaceId\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"Opening Time\",\n//     \"availableKeys\": [\n//       \"SatFrom\",\n//       \"MonFriTo\",\n//       \"SatTo\",\n//       \"SunTo\",\n//       \"MonFriFrom\",\n//       \"SunFrom\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"ServiceInfo\",\n//     \"availableKeys\": [\n//       \"Night\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"StationOwnedByTfl\",\n//     \"availableKeys\": [\n//       \"OwnedByTfl\"\n//     ]\n//   },\n//   {\n//     \"$type\": \"Tfl.Api.Presentation.Entities.StopPointCategory, Tfl.Api.Presentation.Entities\",\n//     \"category\": \"VisitorCentre\",\n//     \"availableKeys\": [\n//       \"Location\"\n//     ]\n//   }\n// ]","function kebabCase(inputString){\n  let outputString = inputString.toLowerCase().replace(/ /g, '-').replace(/'/g, '')\n  return outputString\n}\n\nfunction lineName(tubeLines, line){\n  let index = tubeLines.findIndex(lineX => lineX.id === line);\n  return tubeLines[index]\n}\n\nexport { kebabCase, lineName }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}