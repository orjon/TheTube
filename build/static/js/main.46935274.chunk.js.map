{"version":3,"sources":["components/Nav.js","Helpers.js","reducers/alert.js","reducers/tube.js","reducers/index.js","store.js","components/LineStop.js","actions/tube.js","components/LineStops.js","components/LineStatus.js","components/LoadingCard.js","components/LineStatuses.js","components/Map.js","components/Facilties.js","components/LineArrivals.js","components/Station.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","format","ticking","trimStationName","stationName","trimmedStationName","replace","cropIndex1","indexOf","slice","findLineName","tubeLines","lineId","index","findIndex","line","id","name","initialState","lineStatuses","lineStations","stations","allArrivals","lines","loading","error","combineReducers","alert","state","action","type","payload","filter","tube","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","LineStop","station","getState","map","lightColor","includes","lineName","key","uuid","url","apiString","process","getLineStations","dispatch","a","console","log","currentStations","axios","get","headers","Accept","response","data","length","inputString","validFacilities","rejectedValues","renamedFacilityKeys","validContacts","value","undefined","forEach","property","propertyObject","additionalProperties","find","x","push","facility","facilityObject","commonName","toLowerCase","lat","lng","lon","contact","facilities","newStations","newStation","currentStation","unchangedStations","lineStation","updateStations","updatedStations","Set","sort","payloadObject","getStatuses","t0","performance","now","status","statusSeverityDescription","reason","tStatuses","toFixed","connect","props","useEffect","asyncApiCalls","_","i","tStations","match","params","lineIndex","lineStops","stop","LineStatus","disruptionReason","cropIndex","substring","LoadingCard","color","mapboxgl","accessToken","Map","zoom","markers","container","this","mapDiv","style","center","ref","el","React","Component","Facilties","defaultProps","arrivals","arrival","towards","expected","noArrivals","getStationArrivals","stationId","platform","platformName","desintation","destination","expectedArrival","stationUrl","address","phoneNo","location","lineArrivals","split","lineOfAddress","formatAddress","idToFind","App","findLine","findStationFromUrl","stationToFind","findStationFromId","findLineIndex","lineToFind","stopOrder","orderedLineRoutes","foundIndex","stationA","stationB","exact","path","render","routeProps","component","LineStatuses","href","mapboxToken","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.46935274.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport '../scss/Nav.scss';\nimport Clock from 'react-live-clock';\n\n\nconst Nav = () => {\n  return(\n    <div className='Nav'>\n      <Link to='/'>\n        <div className='AppTitle'>The Tube</div>\n      </Link>\n      <div className='dateTime'>\n        <Clock className = 'Time' format={'HH:mm'} ticking={true}/>\n        <Clock className = 'Date' format={'DD-MMM-YYYY'} ticking={true}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Nav;","\n\nexport function kebabCase(inputString){\n  let outputString = inputString.toLowerCase().replace(/ /g, '-').replace(/'/g, '')\n  return outputString\n}\n\nexport function trimStationName(stationName){\n  let trimmedStationName = stationName.replace('Underground Station', '')\n  let cropIndex1 = trimmedStationName.indexOf('(') + 2\n  if (cropIndex1 !== 0){\n    trimmedStationName = trimmedStationName.slice(0, (cropIndex1-2))\n  } \n  return trimmedStationName\n}\n\nexport function findLineName(tubeLines, lineId){\n  let index = tubeLines.findIndex(line => line.id === lineId);\n  return tubeLines[index].name\n}\n\n\nexport function listArrayNames(array) {\n  let list = ''\n  array.map(element => list = list + element.name + ', ')\n\n  if (list === '') {console.log('NONE')\n  } else {\n    list = list.substring(0, list.length -2)\n    console.log(list)\n  }\n}\n","// import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\n// ALERT STATE\nconst initialState = [];\n\nexport default function(state = initialState, action){\n  const { type, payload } = action;\n\n  switch(type) {\n    case 'SET_ALERT': \n      return [...state, payload]\n    case 'REMOVE_ALERT':\n      return state.filter(alert => alert.id !== payload)\n    default:\n      return state;\n  }\n}\n\n\n\n// alert structure:\n// {\n//   id: 1,\n//   msg: 'loading...',\n//   alertType: 'error'\n// }","// tube STATE\nconst initialState = {\n  lineStatuses: [],\n  lineStations: [],\n  // stations: [{id:1}], \n  stations: [], \n  allArrivals: [],\n  lines: [],\n  index: '',\n  loading: true,\n  error: {}\n}\n\nexport default function(state = initialState, action){\n  const { type, payload } = action;\n\n  switch(type) {\n    case 'GET_STATUSES': \n      return {\n        ...state, \n        lineStatuses: payload,\n        loading: false\n      }\n\n    case 'GET_LINESTATIONS':\n      return {\n        ...state,\n        stations: payload.stations,\n        lineStations: [...state.lineStations, payload.lineStations],\n        loading: false\n      }\n\n    case 'GET_STATIONARRIVALS':\n      return {\n        ...state,\n        allArrivals: payload,\n        loading: false\n      }\n\n    case 'STATUS_ERROR':\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      }\n    default:\n      return state;\n  }\n}\n\n\n\n","import { combineReducers } from 'redux';\nimport alert from './alert';\nimport tube from './tube';\n\nexport default combineReducers({\n  alert,\n  tube\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\n\nexport default store;\n","import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { findLineName } from '../Helpers';\nimport '../scss/LineStop.scss';\nimport store from '../store';\n\nconst LineStop= ({ station }) => { \n  const state = store.getState()\n  let lines = []\n\n  lines = station.lines.map(line => {\n  // Check for light color to format text color if needed\n  let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n  let lightColor = ''\n  if (lightColors.includes(line)){\n    lightColor = 'lightColor'\n  }\n\n\n  let lineName = findLineName(state.tube.lineStatuses, line)\n\n\n  return <Link key={uuid()} to={`/line/${line}`}>\n              <div className={`lineCell ${line} ${lightColor}`}>\n                {/* FIX NAME DISPLAY */}\n                {lineName}\n              </div>\n            </Link>\n  })\n\n  return(\n    <div className='row lineStop'>\n\n      <Link className='w50 lineName' to={`/station/${station.url}`}>\n        {station.name}\n      </Link>\n\n      <div className='column w50 linesBlock'>\n        {lines}\n      </div>\n      \n    </div>\n  )\n}\n\n\n\nexport default LineStop;\n\n\n// class LineStop extends Component{\n//   static defaultProps={\n//     thisStation: {\n//       lines: []\n//     },\n//     station: {\n//       id : undefined\n//     }\n//   }\n\n//   constructor(props){\n//     super(props);\n//     this.findStationFromId = this.findStationFromId.bind(this)\n//   }\n\n//   lineName(tubeLines, line){\n//     let index = tubeLines.findIndex(lineX => lineX.id === line);\n//     return tubeLines[index].name\n//   }\n\n//   lineId(tubeLines, line){\n//     let index = tubeLines.findIndex(lineX => lineX.id === line);\n//     return tubeLines[index].id\n//   }\n\n//   findStationFromId = (stationToFind) => {\n//     return this.props.stations.filter( station => station.id === stationToFind);\n//   }\n\n\n//   render(){\n//     let { station, tubeLines, thisStation} = this.props\n//     let lines = []\n\n//     thisStation = this.findStationFromId(station.id).pop()\n//     // console.log('thisStation: ',thisStation.lines)\n\n\n//     lines = thisStation.lines.map(line => {\n//     // Check for light color to format text color if needed\n//       let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n//       let lightColor = ''\n\n//       if (lightColors.includes(line)){\n//         lightColor = 'lightColor'\n//       }\n//     //\n\n\n//       return <Link key={line} to={`/line/${this.lineId(tubeLines, line)}`}>\n//                 <div className={`lineCell ${line} ${lightColor}`}>\n//                   {this.lineName(tubeLines, line)}\n//                 </div>\n//               </Link>\n//     })\n\n\n  \n//     return(\n//       <div className='row lineStop'>\n//         <Link className='w50 lineName' to={`/station/${station.url}`}>\n//           {station.name}\n//         </Link>\n\n//         <div className='column w50 linesBlock'>\n//           {lines}\n//         </div>\n        \n//       </div>\n//     )\n//   }\n// }\n\n// export default LineStop;\n","import axios from 'axios';\nimport { kebabCase, trimStationName } from '../Helpers';\nimport store from '../store';\n\n\nconst apiString = `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`\n  \n\n\n/// filters etc\n\n\n  //   case 'GET_LINESTATIONS':\n  //     {//Find index of entry to update (entry.id === payload.id)\n  //     // const idMatch = (element) => element.id === payload.id;\n  //     // let indexToUpdate = state.statuses.findIndex(idMatch)\n  //     // console.log('Index to update:',indexToUpdate)\n\n  //     // // let newEntry = (state.statuses[indexToUpdate].stations = [...payload.stations])\n      \n  //     // let entryToUpdate = state.statuses.filter(function (line) { return line.id === payload.id })[0]\n  //     // // console.log('entryToUPdate',entryToUpdate)\n  //     // entryToUpdate.stations = payload.stations\n  //     // console.log('entryToUPdate',entryToUpdate)\n\n  //     // let newArray = [...state.statuses.filter(function (line) { return line.id !== payload.id }),\n  //     // entryToUpdate]\n\n  //     return {\n  //       ...state,\n  //       lineStations: [...state.lineStations, payload],\n  //       // index: state.statuses.findIndex(state.statuses.filter(function (line) { return line.id === payload.id })),\n  //       // Filters out existing match to payload.id\n  //       // stations: [...state.stations.filter(line => line.id !== payload.id), payload],\n  //       loading: false\n  //     // var results = state.statuses.filter(function (line) { return line.id === payload.id });\n  //   }\n  // }\n\n// export const sortStations = () => async dispatch => {\n//   const state = store.getState()\n//   let currentStations = state.tube.stations\n//   console.log('Sorting Stations:', currentStations.length)\n//   let payload = [...new Set([...currentStations])]\n//   console.log('Sorted Stations:', payload)\n\n//   dispatch({\n//     type: 'SORT_STATIONS',\n//     payload: payload\n//   })\n\n// }\n\nexport const getLineStations = (lineId) => async dispatch => {\n  console.log('--------------------------')\n  const state = store.getState()\n  let currentStations = state.tube.stations\n\n  // console.log('Current stations: ',currentStations.length)\n  // listArrayNames(currentStations)\n  // console.log(currentStations)\n  // console.log('Getting stations for:', lineId,'line.')\n  let lineStations = []\n  // let t0 = performance.now()\n\n\n  try {\n    let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/StopPoints?tflOperatedNationalRailStationsOnly=false&${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n\n\n    console.log('Got',lineId,'line Stations:', response.data.length)\n    // console.log('************',response.data)\n    let stations = response.data\n    stations.map(station => {\n      let validFacilities = []\n      let rejectedValues = ['no', '0']\n      let renamedFacilityKeys = ['TaxiRankOutsideStation']\n      let validContacts = []\n      let contact = [\n        {key: 'Address', value: undefined},\n        {key: 'PhoneNo', value: undefined}\n      ]\n\n      contact.forEach(property => {\n        let propertyObject = station.additionalProperties.find(x => x.key === property.key)\n        if (propertyObject){\n          if (!rejectedValues.includes(propertyObject.value)){\n            property.value = propertyObject.value\n            validContacts.push(property)\n            return\n          }\n        } \n      });\n\n      let facility = [\n        {key: 'Ticket Halls', value: undefined},\n        {key: 'Toilets', value: undefined},\n        {key: 'Lifts', value: undefined},\n        {key: 'Escalators', value: undefined},\n        {key: 'WiFi', value: undefined},\n        {key: 'Help Points', value: undefined},\n        {key: 'Payphones', value: undefined},\n        {key: 'Boarding Ramp', value: undefined},\n        {key: 'Cash Machines', value: undefined},\n        {key: 'Euro Cash Machines', value: undefined},\n        {key: 'Waiting Room', value: undefined},\n        // {key: 'Gates', value: undefined},\n        {key: 'TaxiRankOutsideStation', value: undefined},\n        {key: 'Car park', value: undefined},\n        {key: 'Left Luggage', value: undefined},\n        {key: 'Photo Booths', value: undefined},\n        {key: 'Amazon Lockers', value: undefined},\n        {key: 'ASDA Click and Collect', value: undefined},\n      ]\n\n      facility.forEach(facility => {\n        let facilityObject = station.additionalProperties.find(x => x.key === facility.key)\n        if (facilityObject && renamedFacilityKeys.includes(facility.key)) {\n          facility.key = 'Taxi Rank'\n        }\n        if (facilityObject && !rejectedValues.includes(facilityObject.value)){\n          facility.value = facilityObject.value\n          validFacilities.push(facility)\n          return\n        } \n      });\n\n      // console.log('Facilities: ', validFacilities)\n\n      lineStations.push({\n        key: station.id,\n        id: station.id,\n        url: kebabCase(trimStationName(station.commonName)),\n        name: trimStationName(station.commonName),\n        lines: [lineId],\n        lat: station.lat,\n        lng: station.lon,\n        contact: [...validContacts],\n        facilities: validFacilities\n      })\n    })\n\n    let newStations = lineStations.filter(newStation => !currentStations.find( currentStation => newStation.id === currentStation.id))\n    let unchangedStations = currentStations.filter(currentStation => !lineStations.find( lineStation => currentStation.id === lineStation.id))\n    let updateStations = currentStations.filter(currentStation => lineStations.find( lineStation => currentStation.id === lineStation.id))\n    let updatedStations = updateStations.map(station => {\n      station.lines = [...new Set([...station.lines, lineId].sort())]\n      return station\n    })\n\n    // console.log(lineStations)\n    // listArrayNames(lineStations)\n    // compare arrays and find new unique values to add. \n    // console.log('New Stations:', newStations.length)\n    // listArrayNames(newStations)\n    // console.log('Unchanged Stations:', unchangedStations.length)\n    // listArrayNames(unchangedStations)\n    // console.log('Update Stations:', updateStations.length)\n    // listArrayNames(updateStations)\n    // console.log(updateStations)\n    // console.log(updatedStations)\n\n    // let tStations = performance.now()\n    // console.log('took ' + ((tStations - t0)/1000).toFixed(3) + 's')\n\n    let payloadObject = {lineStations: { id: lineId, stations: lineStations}, stations: [...newStations, ...updatedStations, ...unchangedStations] }\n\n    dispatch({\n      type: 'GET_LINESTATIONS',\n      payload: payloadObject\n    })\n\n  } catch (error) {\n    console.log('GET_LINESTATIONS error:', error)\n    dispatch({\n      type: 'STATUS_ERROR',\n      payload: error\n      // payload: { \n      //   msg: error.response.statusText,\n      //   status: error.response.status\n      // }\n    })\n  }\n\n}\n\nexport const getStationArrivals = (station) => async dispatch => {\n  // const { apiString, station } = this.props\n  let stationId = station.id\n  let arrivals = []\n\n  try {\n    let response = await axios.get(`https://api.tfl.gov.uk/StopPoint/${stationId}/Arrivals?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    response.data.map(arrival => \n      arrivals.push({\n        lineName: arrival.lineName,\n        lineId: arrival.lineId,\n        platform: arrival.platformName,\n        desintation: arrival.destination,\n        towards: arrival.towards,\n        expected: arrival.expectedArrival\n      })\n    )\n\n    let payload = arrivals\n    console.log('Payload:',payload)\n\n    dispatch({\n      type: 'GET_STATIONARRIVALS',\n      payload: payload\n    })\n    \n  } catch (error) {\n    console.log('GET_STATIONARRIVALS error:', error)\n    dispatch({\n      type: 'STATUS_ERROR',\n      payload: error\n      // payload: { \n      //   msg: error.response.statusText,\n      //   status: error.response.status\n      // }\n    })\n  }\n\n\n}\n\n// export const getStationInfo = (station) => async dispatch => {\n//   let lineId = station.id\n//   console.log('Getting station info...', station.name)\n//   // const apiString = `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`\n//   let lineStations = []\n//   let t0 = performance.now()\n//   try {\n//     let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/StopPoints?tflOperatedNationalRailStationsOnly=false&${apiString}`, {\n//       headers : {Accept: 'application/json'}\n//     })\n//     console.log(lineId,'line Stations:', response.data.length)\n//     // console.log(response.data)\n//     let counter = 0\n//     response.data.map(station => {\n//       // console.log(counter, station.commonName)\n//       counter++\n\n//       let validFacilities = []\n//       let rejectedValues = ['no', '0']\n//       let renamedFacilityKeys = ['TaxiRankOutsideStation']\n//       let validContacts = []\n\n//       let contact = [\n//         {key: 'Address', value: undefined},\n//         {key: 'PhoneNo', value: undefined}\n//       ]\n\n//       contact.forEach(property => {\n//         let propertyObject = station.additionalProperties.find(x => x.key === property.key)\n//         if (propertyObject){\n//           if (!rejectedValues.includes(propertyObject.value)){\n//             property.value = propertyObject.value\n//             validContacts.push(property)\n//             return\n//           }\n//         } \n//       });\n\n//       let facility = [\n//         {key: 'Ticket Halls', value: undefined},\n//         {key: 'Toilets', value: undefined},\n//         {key: 'Lifts', value: undefined},\n//         {key: 'Escalators', value: undefined},\n//         {key: 'WiFi', value: undefined},\n//         {key: 'Help Points', value: undefined},\n//         {key: 'Payphones', value: undefined},\n//         {key: 'Boarding Ramp', value: undefined},\n//         {key: 'Cash Machines', value: undefined},\n//         {key: 'Euro Cash Machines', value: undefined},\n//         {key: 'Waiting Room', value: undefined},\n//         // {key: 'Gates', value: undefined},\n//         {key: 'TaxiRankOutsideStation', value: undefined},\n//         {key: 'Car park', value: undefined},\n//         {key: 'Left Luggage', value: undefined},\n//         {key: 'Photo Booths', value: undefined},\n//         {key: 'Amazon Lockers', value: undefined},\n//         {key: 'ASDA Click and Collect', value: undefined},\n//       ]\n\n//       facility.forEach(facility => {\n//         let facilityObject = station.additionalProperties.find(x => x.key === facility.key)\n//         if (facilityObject && renamedFacilityKeys.includes(facility.key)) {\n//           facility.key = 'Taxi Rank'\n//         }\n//         if (facilityObject && !rejectedValues.includes(facilityObject.value)){\n//           facility.value = facilityObject.value\n//           validFacilities.push(facility)\n//           return\n//         } \n//       });\n\n//       // console.log('Facilities: ', validFacilities)\n\n//       lineStations.push({\n//         key: station.id,\n//         id: station.id,\n//         url: kebabCase(trimStationName(station.commonName)),\n//         name: trimStationName(station.commonName),\n//         lat: station.lat,\n//         lng: station.lon,\n//         contact: [...validContacts],\n//         facilities: validFacilities\n//       })\n//     })\n\n//     let payloadObject = { id: lineId, stations: lineStations}\n\n//     dispatch({\n//       type: 'GET_LINESTATIONS',\n//       payload: payloadObject\n//     })\n\n//   } catch (error) {\n//     console.log('GET_LINESTATIONS error:', error)\n//     dispatch({\n//       type: 'STATUS_ERROR',\n//       payload: error\n//       // payload: { \n//       //   msg: error.response.statusText,\n//       //   status: error.response.status\n//       // }\n//     })\n//   }\n\n// }\n\n\n\nexport const getStatuses = () => async dispatch => {\n  console.log('Getting statuses...')\n  let t0 = performance.now()\n  let lines = []\n  const apiString = `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`\n  try {\n    let response = await axios.get(`https://api.tfl.gov.uk/line/mode/tube/status?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    // let response = await axios.get(`http://slowwly.robertomurray.co.uk/delay/1000/url/https://api.tfl.gov.uk/line/mode/tube/status?${apiString}`, {\n    //   headers : {Accept: 'application/json'}\n    // })\n\n    \n    let lineStatuses = response.data\n    lineStatuses.map(line => \n      lines.push({\n        key: line.id,\n        id: line.id,\n        name: line.name,\n        status: line.lineStatuses[0].statusSeverityDescription,\n        reason: line.lineStatuses[0].reason\n      })\n    )\n\n    console.log('Got statuses:')\n    console.log(lineStatuses)\n    let tStatuses = performance.now()\n    console.log('took ' + ((tStatuses - t0)/1000).toFixed(3) + 's')\n  \n\n    dispatch({\n      type: 'GET_STATUSES',\n      payload: lines,\n    })\n\n  } catch (error) {\n    dispatch({\n      type: 'STATUS_ERROR',\n      payload: error\n      // payload: { \n      //   msg: error.response.statusText,\n      //   status: error.response.status\n      // }\n    })\n  }\n\n}\n\n\n\n\n\n","import React, { useEffect, Fragment } from 'react';\nimport LineStop from './LineStop';\nimport { connect } from 'react-redux';\nimport { getStatuses, getLineStations} from '../actions/tube';\nimport { findLineName } from '../Helpers';\nimport '../scss/Section.scss';\nimport '../scss/LineStops.scss';\n\n\n\nconst LineStops = ({ getLineStations, getStatuses, tube: { lineStations, lineStatuses, stations }, ...props }) => {\n  useEffect(() => {\n    // Load statuses for name reference if not received already\n    if (lineStatuses.length === 0) {\n      console.log('Getting statuses (LineStops)..')\n      getStatuses()\n    }\n\n  },[])\n\n  useEffect(() => {\n    //Get stations for all Lines asyncronously\n\n    const asyncApiCalls = async _ => {\n      for (let i=0; i< lineStatuses.length; i++ ){\n        let t0 = performance.now()\n        await getLineStations(lineStatuses[i].id)\n        let tStations = performance.now()\n        console.log('That took ' + ((tStations - t0)/1000).toFixed(3) + 's')\n      }\n    }\n\n    if (lineStations.length === 0) {\n      asyncApiCalls()\n    }\n\n  },[lineStatuses,lineStations])\n\n\n  // console.log('--- LineStops.js ---')\n  const lineId = props.match.params.id\n  let lineIndex = undefined\n  let lineName = 'Loading...'\n  let lineStops = []\n\n  // // Find line name\n  // if (lineStatuses.length !== 0) {\n  //   const idMatch = (element) => element.id === lineId;\n  //   let indexOfLine = lineStatuses.findIndex(idMatch)\n  //   lineName = lineStatuses[indexOfLine].name\n  // }\n\n  if (lineStatuses.length !== 0) {\n    lineName = findLineName(lineStatuses, lineId)\n  }\n\n  \n\n  if ((lineStations.length === lineStatuses.length) && (lineStatuses.length !== 0)) {\n    lineIndex = lineStations.findIndex(line => line.id === lineId);\n    lineStops = lineStations[lineIndex].stations\n  }\n\n\n\n  const lightColors = ['hammersmith-city','waterloo-city', 'circle']\n  let lightColor = ''\n\n  if (lightColors.includes(lineId)){\n    lightColor = 'lightColor'\n  }\n\n  console.log('Rendering: ',lineId)\n  \n  return(\n\n  <section>\n    {/* <div className='sectionTitle'>Line Details</div> */}\n    <div className='CardSingle'> \n      <div className='Card'>\n        <div className={`row lineColor ${lineId}`}>\n          <div className={`${lightColor}`}>{lineName}</div>\n        </div>\n        {(lineStops.length === 0) ? 'Loading...' : \n        <Fragment>\n          {/* <div className='row'>\n            <div className='status'>Stations: {lineStops.length}</div>\n          </div> */}\n\n          <div className='row'>\n            <div className='column w100 indent1'>\n              <h2>Stations Served ({lineStops.length})</h2>\n              <div className='LineStops dataBlock indent2'>\n                {/* <div className='row'>\n                  <h4 className='infoLabel'>Station</h4>\n                  <h4 className='infoLabel end'>Lines Served</h4>\n                </div>  */}\n                {lineStops.map(stop => {\n                  let station = stations.find( station => station.id === stop.id )\n                  return <LineStop key={station.id} station={station}/>\n                  }\n                )}\n              </div>\n            </div>\n          </div>\n        </Fragment>}\n      </div>\n    </div>\n  </section>\n)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tube: state.tube,\n  }\n}\n\nexport default connect(mapStateToProps, { getStatuses, getLineStations })(LineStops);\n\n\n// class LineStops extends Component{\n//   static defaultProps={\n//     line: {\n//       id: 'loading...',\n//       name: 'loading...',\n//       stations: []\n//     },\n//     tubeLines: {\n//     },\n//     stations: []\n//   }\n\n//   render(){\n//     const { line, tubeLines, stations } = this.props\n\n//     let lineStops = line.stations.map(station => \n//       <LineStop key={station.id} station={station} stations={stations} tubeLines={tubeLines}/>\n//     )\n\n//     let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n//     let lightColor = ''\n\n//       if (lightColors.includes(line.id)){\n//         lightColor = 'lightColor'\n//       }\n\n//     console.log('line: ',line.id)\n\n\n\n//     return(\n\n//       <section>\n//         {/* <div className='sectionTitle'>Line Details</div> */}\n//         <div className='CardSingle'> \n//           <div className='Card'>\n            \n//             <div className={`row lineColor ${line.id}`}>\n//               <div className={`${lightColor}`}>{line.name}</div>\n//             </div>\n\n//             {/* <div className='row'>\n//               <div className='status'>Stations: {line.stations.length}</div>\n//             </div> */}\n\n//             <div className='row'>\n//               <div className='column w100 indent1'>\n//                 <h2>Stations Served ({line.stations.length})</h2>\n//                 <div className='LineStops dataBlock indent2'>\n//                   {/* <div className='row'>\n//                     <h4 className='infoLabel'>Station</h4>\n//                     <h4 className='infoLabel end'>Lines Served</h4>\n//                   </div> */}\n//                   {lineStops}\n//                 </div>\n//               </div>\n//             </div>\n\n\n\n//           </div>\n//         </div>\n//       </section>\n//     )\n//   }\n// }\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../scss/_Card.scss';\n\nconst LineStatus = ({ line }) => {\n\n  let disruptionReason = ''\n  if (line.reason) {\n    disruptionReason = line.reason\n    var cropIndex = disruptionReason.indexOf(':') + 1\n    disruptionReason = disruptionReason.substring(cropIndex)\n  }\n\n  let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n  let lightColor = ''\n\n  if (lightColors.includes(line.id)){\n    lightColor = 'lightColor'\n  }\n\n  return(\n    <div className='LineStatus'>\n      <Link to={`/line/${line.id}`}>\n        <div className='Card'>\n\n          <div className={`row lineColor ${line.id}`}>\n              <div className={`${lightColor}`}>{line.name}</div>\n          </div>\n\n          <div className=\"cardBody\">\n            <div className='row titleRow'>\n              <div className='status'>{line.status}</div>\n            </div>\n\n            <div className='row'>\n              <div className='data'>\n                {disruptionReason}\n              </div>\n            </div>\n          </div>\n          \n\n        </div>\n      </Link>\n    </div>\n  )\n}\n\nexport default LineStatus;","import React from 'react';\nimport '../scss/_Card.scss';\n\nconst LoadingCard = (line) => {\n\n\n  return(\n    <div className='LineStatus'>\n\n      <div className='Card'>\n\n        <div className={`row lineColor ${line}`}>\n          <div>Line Statuses</div>\n        </div>\n\n        <div className='row titleRow'>\n          <div className='loading'>Loading...</div>\n        </div>\n        \n      </div>\n\n    </div>\n  )\n}\n\nexport default LoadingCard;","import React, { Fragment, useEffect } from 'react';\nimport LineStatus from './LineStatus';\nimport LoadingCard from './LoadingCard';\nimport { connect } from 'react-redux';\nimport { getStatuses } from '../actions/tube';\nimport '../scss/Section.scss';\n\n\n\nconst LineStatuses = ({ getStatuses, tube: { lineStatuses, loading} }) => {\n\n  useEffect(() => {\n    getStatuses()\n  },[getStatuses])\n\n    return(\n      <section>\n        <div className='sectionBody CardGrid'>\n          {loading ? \n            <Fragment>\n              <LoadingCard color='piccadilly'/>\n            </Fragment>\n            : \n            <Fragment>\n              {lineStatuses.map( line => <LineStatus key={line.id} line={line}/>)}\n            </Fragment>}\n        </div>\n      </section>\n    )\n  \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tube: state.tube\n  }\n}\n\nexport default connect(mapStateToProps, { getStatuses })(LineStatuses)","import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: this.props.lng,\n      lat: this.props.lat,\n      zoom: 15\n    };\n    this.markers = []\n  }\n  \n  // constructor() {\n  //   super()\n\n  //   this.markers = []\n  // }\n\n  componentDidMount() {\n    // this.map = new mapboxgl.Map({\n    //   container: this.mapDiv,\n    //   style: 'mapbox://styles/mapbox/streets-v9',\n    //   center: this.props.center,\n    //   zoom: 12\n    // })\n    // this.map.on('click', this.props.onClick)\n    // this.setMarkers()\n\n\n\n    new mapboxgl.Map({\n      container: this.mapDiv,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n  }\n\n\n\n\n  // setMarkers() {\n  //   this.markers.forEach(marker => marker.remove())\n  //   this.markers = this.props.points.map(point => {\n  //     return new mapboxgl.Marker()\n  //       .setLngLat({  lat: point.lat, lng: point.lon })\n  //       .addTo(this.map)\n  //   })\n  //   console.log(this.markers)\n  // }\n\n  render() {\n\n    return(\n      <div className='row map' ref={el => this.mapDiv = el} />\n    )\n  }\n}\n\nexport default Map\n","import React, { Component } from 'react';\nimport '../scss/Facilities.scss';\n\nclass Facilties extends Component {\n  static defaultProps={\n    facilities: []\n    }\n\n  render(){\n    let { facilities } = this.props\n\n    facilities = facilities.map(facility => \n      <div key={facility.key} className='w25 column'>\n        {facility.key}\n      </div>\n    )\n\n    return(\n        <div className='Facilities dataBlock indent2'>\n        {facilities}\n        </div>\n\n\n\n      // {/* <div className='row facilitiesIcons indent2'> */\n      //     /* <IconWifi /> */\n      //   /* <img src={IconWifi} className='icon' alt=\"Wifi Icon\" />\n      //   <img src={IconATM} className='icon' alt=\"ATM Icon\" /> */\n      // /* </div> */}\n\n    )\n  }\n}\n\nexport default Facilties;","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport {v4 as uuid} from 'uuid';\nimport { connect } from 'react-redux';\nimport '../scss/LineArrivals.scss';\n// import Moment from 'react-moment';\n// import 'moment-timezone';\n\n\nconst LineArrivals = ({tube: {allArrivals}, ...props}) => {\n  const { line } = props\n\n  console.log('Line',line)\n\n  console.log('LineArrivals: ',allArrivals )\n\n  let arrivals = allArrivals\n    .filter(arrival => arrival.lineId === line.id)\n    .map(arrival => \n      <div className='row' key={uuid()}>\n        <div >{arrival.towards}</div>\n        <div className='end'>{arrival.expected}</div>\n      </div>\n    )\n\n  console.log('arrivals: ',arrivals )\n\n    let noArrivals = false;\n\n    if (arrivals.length === 0){\n      noArrivals = true;\n    }\n\n  \n  let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n  let lightColor = ''\n\n    if (lightColors.includes(line.id)){\n      lightColor = 'lightColor'\n    }\n  \n    return(\n      <div className='column dataBlock indent2'>\n        <Link className='row' to={`/line/${line.id}`}>\n          <div className='column w100 b1'>\n            <div key={line.id} className={`row lineColor ${line.id}`}>\n              <div className={`${lightColor}`}>{line.name}</div>\n            </div>\n\n\n            <div className='row linkTo'>\n              {/* <h3 >{line.name}</h3> */}\n              <div className='status'>{line.status}</div>\n            </div>\n          </div>\n        </Link>\n\n        {/* <div className='row'>\n          <h4 className='infoLabel'>Towards</h4>\n          <h4 className='infoLabel end'>Expected Arrival</h4>\n        </div> */}\n\n        { !noArrivals &&\n          <div className='row'>\n            <h4 className='infoLabel'>Towards</h4>\n            <h4 className='infoLabel end'>Expected Arrival</h4>\n          </div>\n          }\n\n        {/* <div className={`row lineRowDivide`}></div> */}\n        {arrivals}\n        {/* <div className={`row lineRowDivide`}></div> */}\n      </div>\n    )\n  }\n\n  const mapStateToProps = (state) => {\n    return {\n      tube: state.tube\n    }\n  }\n  \n  export default connect(mapStateToProps, { })(LineArrivals);\n  \n  \n\n\n\n\n// class LineArrivals extends Component{\n\n\n//   render(){\n//     const { line } = this.props\n//     let allArrivals = this.props.arrivals\n\n//     let arrivals = allArrivals\n//       .filter(arrival => arrival.lineId === line.id)\n//       .map(arrival => \n//         <div className='row' key={uuid()}>\n//           <div >{arrival.towards}</div>\n//           <div className='end'>{arrival.expected}</div>\n//         </div>\n//       )\n\n//       let noArrivals = false;\n\n//       if (arrivals.length === 0){\n//         noArrivals = true;\n//       }\n\n    \n//     let lightColors = ['hammersmith-city','waterloo-city', 'circle']\n//     let lightColor = ''\n\n//       if (lightColors.includes(line.id)){\n//         lightColor = 'lightColor'\n//       }\n  \n\n//     return(\n//       <div className='column dataBlock indent2'>\n//           <Link className='row' to={`/line/${line.id}`}>\n//             <div className='column w100 b1'>\n//               <div key={line.id} className={`row lineColor ${line.id}`}>\n//                 <div className={`${lightColor}`}>{line.name}</div>\n//               </div>\n\n\n//               <div className='row linkTo'>\n//                 {/* <h3 >{line.name}</h3> */}\n//                 <div className='status'>{line.status}</div>\n//               </div>\n//             </div>\n//           </Link>\n\n//             {/* <div className='row'>\n//               <h4 className='infoLabel'>Towards</h4>\n//               <h4 className='infoLabel end'>Expected Arrival</h4>\n//             </div> */}\n\n//           { !noArrivals &&\n//             <div className='row'>\n//               <h4 className='infoLabel'>Towards</h4>\n//               <h4 className='infoLabel end'>Expected Arrival</h4>\n//             </div>\n//            }\n\n//           {/* <div className={`row lineRowDivide`}></div> */}\n//           {arrivals}\n//           {/* <div className={`row lineRowDivide`}></div> */}\n//         </div>\n//     )\n//   }\n// }\n\n// export default LineArrivals;\n\n\n\n\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { getStatuses, getLineStations, getStationArrivals} from '../actions/tube';\nimport {v4 as uuid} from 'uuid';\nimport Map from './Map';\nimport Facilities from './Facilties';\nimport LineArrivals from '../components/LineArrivals';\nimport '../scss/Section.scss';\nimport '../scss/Station.scss';\n// import IconWifi from './icons/wifi.svg';\n// import IconATM from './icons/atm.svg';\n\n\n\nconst apiString =  `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`\n//   mapboxToken = process.env.REACT_APP_MAPBOX_TOKEN\n\n\n\nconst Station = ({ getLineStations, getStatuses, getStationArrivals, tube: { lineStations, lineStatuses, stations, arrivals }, ...props }) => {\n  useEffect(() => {\n    // Load statuses for name reference if not received already\n    if (lineStatuses.length === 0) {\n      console.log('Getting statuses (LineStops)..')\n      getStatuses()\n    }\n  },[])\n\n  useEffect(() => {\n    //Get stations for all Lines asyncronously\n\n    const asyncApiCalls = async _ => {\n      for (let i=0; i< lineStatuses.length; i++ ){\n        let t0 = performance.now()\n        await getLineStations(lineStatuses[i].id)\n        let tStations = performance.now()\n        console.log('That took ' + ((tStations - t0)/1000).toFixed(3) + 's')\n      }\n    }\n\n    if (lineStations.length === 0) {\n      asyncApiCalls()\n    }\n\n  },[lineStatuses,lineStations])\n\n  useEffect(() => {\n    if (station) getStationArrivals(station)\n  },[stations])\n\n\n  const findLine = (idToFind) => {\n    return lineStatuses.find(function(line){\n      return line.id === idToFind;\n    })\n  }\n\n\n  const formatAddress = (address) => {\n    address = address.split(',')\n    address = address.map(lineOfAddress => \n      <div key={uuid()}>{lineOfAddress}</div>\n    )\n    return address\n  }\n\n  const formatLocation = (lat, lng) =>{\n    lat = lat + '°N'\n    if (lng >= 0) {\n      lng = lng + '°E'\n    } else{\n      lng = - lng + '°W'\n    }\n    return {lat: lat, lng: lng}\n  }\n\n\n  const stationUrl = props.match.params.url\n\n  const station = stations.find(station => station.url === stationUrl)\n  let address =''\n  let phoneNo = ''\n  let location = ''\n  let lineArrivals = ''\n\n  if (station) {\n    console.log('station:',station.name)\n    address = station.contact[0].value\n\n    // Harrow on the Hill error fix - but not working!\n    // if (station.id === 'ID940GZZLUHOH') {address = 'Station Rd, Harrow HA1 1BB'}\n\n    address = formatAddress(address)\n    phoneNo = station.contact[1].value\n    location = formatLocation(station.lat, station.lng)\n\n    // console.log(address)\n\n    // Loops through each line served by station\n    lineArrivals = station.lines.map(line => <LineArrivals key={line} line={(findLine(line))} arrivals={arrivals}/>)\n    \n\n  }\n\n\n  \n  return(\n    <section>\n\n      {/* <div className='sectionTitle'>Station Details</div> */}\n      <div className='CardSingle'>\n        <div className='Card'> \n\n          <div className='row'>\n            {/* <h1>Station Name</h1> */}\n            {station ? <h1>{station.name}</h1> : <h1>Loading...</h1>}\n          </div>\n\n          {station?  \n              \n            <Fragment>\n              <div className='row'>\n                <div className='column w100 indent1'>\n                  <h2>Arrivals</h2>\n                  {lineArrivals}\n                </div>\n              </div>\n\n              <div className='row'>\n                <div className='column w100 indent2'>\n                  <Map lat={station.lat} lng={station.lng}/>\n                  <div className='row'>\n                    <div>{location.lat} {location.lng}</div>\n                    <div className='code'>Station ID: {station.id}</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className='row address'>\n                <div className='column w50 indent1'>\n                  <h2>Address</h2>\n                  <div className='column dataBlock indent2'>\n                    {address}\n                  </div>\n                </div> \n                <div className='column w50 indent1'>\n                  <h2>Telephone</h2>\n                  <div className='column dataBlock indent2'>\n                    {phoneNo}\n                  </div>\n                </div>\n              </div>\n\n              <div className='row facilities'>\n                <div className='column w100 indent1'>\n                  <h2>Facilities</h2>\n                  <Facilities facilities={station.facilities}/>\n                </div>\n              </div>\n            </Fragment> \n          : ''}\n\n        </div>\n          \n      </div>\n    </section>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tube: state.tube,\n  }\n}\n\nexport default connect(mapStateToProps, { getStatuses, getLineStations, getStationArrivals })(Station);\n\n\n\n\n\n// class Station extends Component {\n//   static defaultProps={\n//     station: {\n//       id: undefined,\n//       url: 'loading...',\n//       name: 'loading...',\n//       address: '',\n//       lat: 0,\n//       lng: 0,\n//       lines: [],\n//       contact: [\n//         {value: 'the address'},\n//         {value: 'the phone number'}\n//       ]\n//     }\n//   }\n\n//   constructor(props){\n//     super(props);\n//     this.state={\n//       arrivals:[],\n//       station: this.props.station\n//     }\n//     this.getArrivals = this.getArrivals.bind(this)\n//   }\n\n//   async getArrivals(){\n//     const { apiString, station } = this.props\n//     if (station.id === undefined){ return }\n//     // let station = this.findStationFromUrl(this.props.routeProps.match.params.url)\n//     const stationId = station.id\n//     let arrivals = []\n//     let response = await axios.get(`https://api.tfl.gov.uk/StopPoint/${stationId}/Arrivals?${apiString}`, {\n//       headers : {Accept: 'application/json'}\n//     })\n//     response.data.map(arrival => \n//       arrivals.push({\n//         lineName: arrival.lineName,\n//         lineId: arrival.lineId,\n//         platform: arrival.platformName,\n//         desintation: arrival.destination,\n//         towards: arrival.towards,\n//         expected: arrival.expectedArrival\n//       })\n//     )\n//     this.setState({\n//       arrivals: [...arrivals],\n//       station: {\n//       id: undefined,\n//       url: 'loading...',\n//       name: 'loading...',\n//       address: '',\n//       lat: 0,\n//       lng: 0,\n//       lines: [],\n//       contact: [\n//         {value: 'the address'},\n//         {value: 'the phone number'}\n//       ]\n//     }\n//     })\n//   }\n\n//   componentDidMount(){\n//     // const { getInfo } = this.props\n//     // getInfo()\n//     window.scrollTo(0, 0);\n//     this.getArrivals()\n//   }\n\n//   formatLocation(lat, lng){\n//     lat = lat + '°N'\n//     if (lng >= 0) {\n//       lng = lng + '°E'\n//     } else{\n//       lng = - lng + '°W'\n//     }\n//     return {lat: lat, lng: lng}\n//   }\n\n//   formatAddress(address){\n//     address = address.split(',')\n//     address = address.map(lineOfAddress => \n//       <div key={uuid()}>{lineOfAddress}</div>\n//     )\n//     return address\n//   }\n\n//   findLine(tubeLines, line){\n//     let index = tubeLines.findIndex(lineX => lineX.id === line);\n//     return tubeLines[index]\n//   }\n\n//   // useEffect(() => {\n//   //   window.scrollTo(0, 0)\n//   // }, [])\n\n \n\n//   render(){\n\n//     const { station, tubeLines } = this.props\n\n//     if (this.state.arrivals.length === 0){\n//       this.getArrivals()\n//     }\n\n\n//     // Loops through each line served by station\n//       let lineArrivals = station.lines.map(line => \n//         <LineArrivals key={line} line={this.findLine(tubeLines, line)} arrivals={this.state.arrivals}/>\n//       )\n//     //\n\n\n\n//     let address = station.contact[0].value\n\n//     // Harrow on the Hill error fix - but not working!\n//     if (station.id === 'ID940GZZLUHOH') {address = 'Station Rd, Harrow HA1 1BB'}\n\n//     address = this.formatAddress(address)\n//     let phoneNo = station.contact[1].value\n//     let location = this.formatLocation(station.lat, station.lng)\n\n//     // console.log(address)\n\n//     return(\n//       <section>\n//         {/* <div className='sectionTitle'>Station Details</div> */}\n//         <div className='CardSingle'>\n//           <div className='Card'> \n\n//             <div className='row'>\n//               <h1>{station.name}</h1>\n//             </div>\n\n//             {/* <div className={`row lineRowDivide`}></div> */}\n//             <div className='row'>\n//               <div className='column w100 indent1'>\n//                 <h2>Arrivals</h2>\n//                 {lineArrivals}\n//               </div>\n//             </div>\n\n//             <div className='row'>\n//               <div className='column w100 indent2'>\n//                 <Map\n//                     lat={station.lat}\n//                     lng={station.lng}\n//                   />\n//                 <div className='row'>\n//                   <div>{location.lat} {location.lng}</div>\n//                   <div className='code'>Station ID: {station.id}</div>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row address'>\n//               <div className='column w50 indent1'>\n//                 <h2>Address</h2>\n//                 <div className='column dataBlock indent2'>\n//                   {address}\n//                 </div>\n//               </div> \n//               <div className='column w50 indent1'>\n//                 <h2>Telephone</h2>\n//                 <div className='column dataBlock indent2'>\n//                   {phoneNo}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row facilities'>\n//               <div className='column w100 indent1'>\n//                 <h2>Facilities</h2>\n//                 <Facilities facilities={station.facilities}/>\n//               </div>\n//             </div>\n\n//           </div>\n            \n//         </div>\n//       </section>\n//     )\n//   }\n// }\n\n// export default Station","import React, { Component } from 'react';\nimport { Route, Switch} from 'react-router-dom';\nimport axios from 'axios';\nimport Nav from './components/Nav';\nimport LineStops from './components/LineStops'\nimport LineStatuses from './components/LineStatuses';\nimport Station from './components/Station';\nimport './scss/App.scss';\n\n//reduxStore\n//COnnect react & redux:\nimport { Provider } from 'react-redux';\n//bring in store\nimport store from './store';\n\n// import Moment from 'react-moment';\n// import 'moment-timezone';\n\n\nclass App extends Component {\n  static defaultProps = {\n    apiString: `app_id=${process.env.REACT_APP_TFL_API_ID}&app_key=${process.env.REACT_APP_TFL_APP_KEY}`,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN\n  }\n\n  constructor(props){\n    super(props);\n    this.state={\n      tubeLines: [],\n      stations: [],\n    }\n  }\n\n\n  componentDidMount(){\n    //If state.tubesLines array is empty...\n    if (this.state.tubeLines.length === 0){\n      // this.getInfo()\n    }\n  }\n\n\n  async getStopOrder(lineId){\n    const { apiString } = this.props\n    let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/Route/Sequence/all?${apiString}`, {\n      headers : {Accept: 'application/json'}\n    })\n    // console.log('Got:', lineId)\n    let stopOrder = response.data.orderedLineRoutes\n    return stopOrder\n  }\n\n  checkProperties(property){\n    if (property){\n      property = property.value\n      return property\n    } \n    property = undefined\n    return property\n  }\n\n\n  // async getStations(lineId){\n  //   const { apiString } = this.props\n  //   let lineStations = []\n  //   let response = await axios.get(`https://api.tfl.gov.uk/Line/${lineId}/StopPoints?tflOperatedNationalRailStationsOnly=false&${apiString}`, {\n  //     headers : {Accept: 'application/json'}\n  //   })\n  //   // console.log('Line Stations:', response.data[1].additionalProperties)\n  //   response.data.map(station => {\n  //     let contact = [\n  //       {key: 'Address', value: undefined},\n  //       {key: 'PhoneNo', value: undefined}\n  //     ]\n  //     let facility = [\n  //       {key: 'Ticket Halls', value: undefined},\n  //       {key: 'Toilets', value: undefined},\n  //       {key: 'Lifts', value: undefined},\n  //       {key: 'Escalators', value: undefined},\n  //       {key: 'WiFi', value: undefined},\n  //       {key: 'Help Points', value: undefined},\n  //       {key: 'Payphones', value: undefined},\n  //       {key: 'Boarding Ramp', value: undefined},\n  //       {key: 'Cash Machines', value: undefined},\n  //       {key: 'Euro Cash Machines', value: undefined},\n  //       {key: 'Waiting Room', value: undefined},\n  //       // {key: 'Gates', value: undefined},\n  //       {key: 'TaxiRankOutsideStation', value: undefined},\n  //       {key: 'Car park', value: undefined},\n  //       {key: 'Left Luggage', value: undefined},\n  //       {key: 'Photo Booths', value: undefined},\n  //       {key: 'Amazon Lockers', value: undefined},\n  //       {key: 'ASDA Click and Collect', value: undefined},\n  //     ]\n\n\n  //     let validFacilities = []\n  //     let rejectedValues = ['no', '0']\n  //     let renamedFacilityKeys = ['TaxiRankOutsideStation']\n      \n\n  //     facility.forEach(facility => {\n  //       let facilityObject = station.additionalProperties.find(x => x.key === facility.key)\n\n        \n\n  //       if (facilityObject && renamedFacilityKeys.includes(facility.key)) {\n  //         facility.key = 'Taxi Rank'\n  //       }\n\n\n  //       if (facilityObject && !rejectedValues.includes(facilityObject.value)){\n  //         facility.value = facilityObject.value\n  //         validFacilities.push(facility)\n  //         return\n  //       } \n  //     });\n\n\n  //     let validContacts = []\n\n  //     contact.forEach(property => {\n  //       let propertyObject = station.additionalProperties.find(x => x.key === property.key)\n  //       if (propertyObject){\n  //         if (!rejectedValues.includes(propertyObject.value)){\n  //           property.value = propertyObject.value\n  //           validContacts.push(property)\n  //           return\n  //         }\n  //       } \n  //     });\n\n  //     return lineStations.push({\n  //       key: station.id,\n  //       id: station.id,\n  //       url: kebabCase(this.trimStationName(station.commonName)),\n  //       name: this.trimStationName(station.commonName),\n  //       lat: station.lat,\n  //       lng: station.lon,\n  //       contact: [...validContacts],\n  //       facilities: validFacilities\n  //     })\n  //   })\n  //   return lineStations;\n  // }\n\n\n\n\n\n\n\n  addStation(newStation, stations){\n    let foundIndex = stations.findIndex(station => station.id === newStation.id);\n    if (foundIndex !== -1){\n      stations[foundIndex].lines.push(newStation.lines[0])\n    } else {\n      stations = [...stations, newStation]\n    }\n    return stations\n  }\n\n  compare( stationA, stationB ) {\n    if ( stationA.name < stationB.name ){\n      return -1;\n    }\n    if ( stationA.name > stationB.name ){\n      return 1;\n    }\n    return 0;\n  }\n\n  //returns single line based on id\n  findLine = (idToFind) => {\n    return this.state.tubeLines.find(function(line){\n      return line.id === idToFind;\n    })\n  }\n\n  findStationFromUrl = (stationToFind) => {\n    return this.state.stations.find(function(station){\n      return station.url === stationToFind;\n    })\n  }\n\n  findStationFromId = (stationToFind) => {\n    return this.state.stations.findIndex( station => station.id === stationToFind);\n  }\n\n\n  findLineIndex = (lineToFind) => {\n    let index = this.state.tubeLines.findIndex(line => line.id === lineToFind)\n    return index\n  }\n\n\n  render(){\n    return (\n      <Provider store={store}>\n        <div className='App'>\n          <header>\n            <Nav />\n          </header>\n          <Switch>\n            \n            {/* <Route exact path='/line/:id' component = { LineStops }/> */}\n\n            <Route exact path='/line/:id'\n              render={(routeProps) => (\n                <LineStops\n                  {...routeProps} \n                  // tubeLines={this.state.tubeLines}\n                  // stations={this.state.stations}\n                  // line={this.findLine(routeProps.match.params.id)}\n                  // lineIndex={this.findLineIndex(routeProps.match.params.id)}\n                />\n              )}\n            />\n\n\n            <Route exact path='/station/:url'\n              render={(routeProps) => (\n                <Station\n                  {...routeProps} \n                  // tubeLines={this.state.tubeLines}\n                  // apiString={this.props.apiString}\n                  station={this.findStationFromUrl(routeProps.match.params.url)}\n                />\n              )}\n            />\n\n            <Route path='/' component = { LineStatuses }/>\n          </Switch>\n    \n          <footer className='right'>\n            <a href='http://www.orjon.com'>orjon.com</a>\n          </footer>\n        </div>\n      </Provider>\n\n    );\n  }\n\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}